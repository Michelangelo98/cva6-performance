
main.elf:     file format elf64-littleriscv


Disassembly of section .text:

0000000080000000 <main-0x20>:
    80000000:	f1402573          	csrr	a0,mhartid
    80000004:	00010117          	auipc	sp,0x10
    80000008:	ffc10113          	addi	sp,sp,-4 # 80010000 <DRAM_TOP>
    8000000c:	00d51513          	slli	a0,a0,0xd
    80000010:	40a10133          	sub	sp,sp,a0
    80000014:	fe010113          	addi	sp,sp,-32
    80000018:	008000ef          	jal	ra,80000020 <main>
    8000001c:	0000006f          	j	8000001c <BOOT_MEM+0x1c>

0000000080000020 <main>:
#include "arch.h"
#include "rand.h"
#include "test.h"

int main()
{
    80000020:	1141                	addi	sp,sp,-16
    80000022:	e406                	sd	ra,8(sp)
  // Get my global process id
  int me = arch_get_process_id();
    80000024:	3bc000ef          	jal	ra,800003e0 <arch_get_process_id>
    80000028:	2501                	sext.w	a0,a0

/*  // Random seed
  uint32_t seed = 14593;*/

  // Processes not being used spin here
  if (me >= NUM_PROCESSES) while (1);
    8000002a:	4785                	li	a5,1
    8000002c:	00a7d363          	bge	a5,a0,80000032 <main+0x12>
    80000030:	a001                	j	80000030 <main+0x10>

  if (me == 0) {
    80000032:	c519                	beqz	a0,80000040 <main+0x20>
    init_uart(50000000, 115200*4);
    put_string("Hello World!\n");
    test_init();
  }

  test_body(me);
    80000034:	68e000ef          	jal	ra,800006c2 <test_body>
    log_display();
    put_string("Time\n");
  }

  return 0;
}
    80000038:	4501                	li	a0,0
    8000003a:	60a2                	ld	ra,8(sp)
    8000003c:	0141                	addi	sp,sp,16
    8000003e:	8082                	ret
    init_uart(50000000, 115200*4);
    80000040:	000715b7          	lui	a1,0x71
    80000044:	80058593          	addi	a1,a1,-2048 # 70800 <HARTID+0x6f8ec>
    80000048:	02faf537          	lui	a0,0x2faf
    8000004c:	08050513          	addi	a0,a0,128 # 2faf080 <HARTID+0x2fae16c>
    80000050:	47e000ef          	jal	ra,800004ce <init_uart>
    put_string("Hello World!\n");
    80000054:	00001517          	auipc	a0,0x1
    80000058:	85450513          	addi	a0,a0,-1964 # 800008a8 <.got.plt+0x10>
    8000005c:	020000ef          	jal	ra,8000007c <put_string>
    test_init();
    80000060:	5bc000ef          	jal	ra,8000061c <test_init>
  test_body(me);
    80000064:	4501                	li	a0,0
    80000066:	65c000ef          	jal	ra,800006c2 <test_body>
    log_display();
    8000006a:	2fe000ef          	jal	ra,80000368 <log_display>
    put_string("Time\n");
    8000006e:	00001517          	auipc	a0,0x1
    80000072:	84a50513          	addi	a0,a0,-1974 # 800008b8 <.got.plt+0x20>
    80000076:	006000ef          	jal	ra,8000007c <put_string>
    8000007a:	bf7d                	j	80000038 <main+0x18>

000000008000007c <put_string>:
// ===============
// Output routines
// ===============

void put_string(char* s)
{
    8000007c:	1141                	addi	sp,sp,-16
    8000007e:	e406                	sd	ra,8(sp)
    80000080:	e022                	sd	s0,0(sp)
    80000082:	842a                	mv	s0,a0
  while (*s) { put_char(*s); s++; }
    80000084:	00054503          	lbu	a0,0(a0)
    80000088:	c519                	beqz	a0,80000096 <put_string+0x1a>
    8000008a:	3f8000ef          	jal	ra,80000482 <put_char>
    8000008e:	0405                	addi	s0,s0,1
    80000090:	00044503          	lbu	a0,0(s0)
    80000094:	f97d                	bnez	a0,8000008a <put_string+0xe>
}
    80000096:	60a2                	ld	ra,8(sp)
    80000098:	6402                	ld	s0,0(sp)
    8000009a:	0141                	addi	sp,sp,16
    8000009c:	8082                	ret

000000008000009e <put_uint64>:
{
  put_uint64((uint64_t) i);
}

void put_uint64(uint64_t i)
{
    8000009e:	7139                	addi	sp,sp,-64
    800000a0:	fc06                	sd	ra,56(sp)
    800000a2:	f822                	sd	s0,48(sp)
    800000a4:	f426                	sd	s1,40(sp)
  char str[32];
  int n = 0;
  while (i > 0) { str[n] = '0' + (i % 10); i /= 10; n++; }
    800000a6:	c135                	beqz	a0,8000010a <put_uint64+0x6c>
    800000a8:	858a                	mv	a1,sp
    800000aa:	872e                	mv	a4,a1
    800000ac:	4629                	li	a2,10
    800000ae:	4805                	li	a6,1
    800000b0:	40b8083b          	subw	a6,a6,a1
    800000b4:	48a5                	li	a7,9
    800000b6:	a011                	j	800000ba <put_uint64+0x1c>
    800000b8:	8536                	mv	a0,a3
    800000ba:	02c576b3          	remu	a3,a0,a2
    800000be:	0306869b          	addiw	a3,a3,48
    800000c2:	00d70023          	sb	a3,0(a4)
    800000c6:	02c556b3          	divu	a3,a0,a2
    800000ca:	00e807bb          	addw	a5,a6,a4
    800000ce:	0007849b          	sext.w	s1,a5
    800000d2:	0705                	addi	a4,a4,1
    800000d4:	fea8e2e3          	bltu	a7,a0,800000b8 <put_uint64+0x1a>
  if (n == 0)
    800000d8:	c88d                	beqz	s1,8000010a <put_uint64+0x6c>
    put_char('0');
  else
    while (n > 0) { n--; put_char(str[n]); }
    800000da:	02905363          	blez	s1,80000100 <put_uint64+0x62>
    800000de:	840a                	mv	s0,sp
    800000e0:	9426                	add	s0,s0,s1
    800000e2:	15fd                	addi	a1,a1,-1
    800000e4:	009587b3          	add	a5,a1,s1
    800000e8:	34fd                	addiw	s1,s1,-1
    800000ea:	1482                	slli	s1,s1,0x20
    800000ec:	9081                	srli	s1,s1,0x20
    800000ee:	409784b3          	sub	s1,a5,s1
    800000f2:	fff44503          	lbu	a0,-1(s0)
    800000f6:	38c000ef          	jal	ra,80000482 <put_char>
    800000fa:	147d                	addi	s0,s0,-1
    800000fc:	fe941be3          	bne	s0,s1,800000f2 <put_uint64+0x54>
}
    80000100:	70e2                	ld	ra,56(sp)
    80000102:	7442                	ld	s0,48(sp)
    80000104:	74a2                	ld	s1,40(sp)
    80000106:	6121                	addi	sp,sp,64
    80000108:	8082                	ret
    put_char('0');
    8000010a:	03000513          	li	a0,48
    8000010e:	374000ef          	jal	ra,80000482 <put_char>
    80000112:	b7fd                	j	80000100 <put_uint64+0x62>

0000000080000114 <put_uint32>:
{
    80000114:	1141                	addi	sp,sp,-16
    80000116:	e406                	sd	ra,8(sp)
  put_uint64((uint64_t) i);
    80000118:	1502                	slli	a0,a0,0x20
    8000011a:	9101                	srli	a0,a0,0x20
    8000011c:	f83ff0ef          	jal	ra,8000009e <put_uint64>
}
    80000120:	60a2                	ld	ra,8(sp)
    80000122:	0141                	addi	sp,sp,16
    80000124:	8082                	ret

0000000080000126 <put_int64>:

void put_int64(int64_t i)
{
    80000126:	1141                	addi	sp,sp,-16
    80000128:	e406                	sd	ra,8(sp)
    8000012a:	e022                	sd	s0,0(sp)
    8000012c:	842a                	mv	s0,a0
  if (i < 0) {
    8000012e:	00054963          	bltz	a0,80000140 <put_int64+0x1a>
    put_char('-');
    i = -i;
  }
  put_uint64 ((uint64_t) i);
    80000132:	8522                	mv	a0,s0
    80000134:	f6bff0ef          	jal	ra,8000009e <put_uint64>
}
    80000138:	60a2                	ld	ra,8(sp)
    8000013a:	6402                	ld	s0,0(sp)
    8000013c:	0141                	addi	sp,sp,16
    8000013e:	8082                	ret
    put_char('-');
    80000140:	02d00513          	li	a0,45
    80000144:	33e000ef          	jal	ra,80000482 <put_char>
    i = -i;
    80000148:	40800433          	neg	s0,s0
    8000014c:	b7dd                	j	80000132 <put_int64+0xc>

000000008000014e <halt>:

void halt()
{
    8000014e:	1141                	addi	sp,sp,-16
    80000150:	e406                	sd	ra,8(sp)
  put_string("Halted\n");
    80000152:	00000517          	auipc	a0,0x0
    80000156:	76e50513          	addi	a0,a0,1902 # 800008c0 <.got.plt+0x28>
    8000015a:	f23ff0ef          	jal	ra,8000007c <put_string>
  while(1);
    8000015e:	a001                	j	8000015e <halt+0x10>

0000000080000160 <log_check_coherence>:

int log_check_coherence()
{
  for (int i = 0; i < VECTOR_SIZE; i++)
  {
    if (test.outcome[i] != NUM_PROCESSES*NUM_ITERATIONS)
    80000160:	00000797          	auipc	a5,0x0
    80000164:	7307b783          	ld	a5,1840(a5) # 80000890 <_GLOBAL_OFFSET_TABLE_+0x8>
    80000168:	439c                	lw	a5,0(a5)
    8000016a:	2781                	sext.w	a5,a5
    8000016c:	4711                	li	a4,4
    8000016e:	02e79563          	bne	a5,a4,80000198 <log_check_coherence+0x38>
  for (int i = 0; i < VECTOR_SIZE; i++)
    80000172:	4705                	li	a4,1
    if (test.outcome[i] != NUM_PROCESSES*NUM_ITERATIONS)
    80000174:	00000617          	auipc	a2,0x0
    80000178:	71c63603          	ld	a2,1820(a2) # 80000890 <_GLOBAL_OFFSET_TABLE_+0x8>
    8000017c:	4691                	li	a3,4
  for (int i = 0; i < VECTOR_SIZE; i++)
    8000017e:	4595                	li	a1,5
    if (test.outcome[i] != NUM_PROCESSES*NUM_ITERATIONS)
    80000180:	00271793          	slli	a5,a4,0x2
    80000184:	97b2                	add	a5,a5,a2
    80000186:	439c                	lw	a5,0(a5)
    80000188:	2781                	sext.w	a5,a5
    8000018a:	00d79963          	bne	a5,a3,8000019c <log_check_coherence+0x3c>
  for (int i = 0; i < VECTOR_SIZE; i++)
    8000018e:	2705                	addiw	a4,a4,1
    80000190:	feb718e3          	bne	a4,a1,80000180 <log_check_coherence+0x20>
    {
      return -1;
    }
  }
  return 0;
    80000194:	4501                	li	a0,0
    80000196:	8082                	ret
      return -1;
    80000198:	557d                	li	a0,-1
    8000019a:	8082                	ret
    8000019c:	557d                	li	a0,-1
}
    8000019e:	8082                	ret

00000000800001a0 <log_print_performance>:

void log_print_performance()
{
    800001a0:	1141                	addi	sp,sp,-16
    800001a2:	e406                	sd	ra,8(sp)
    800001a4:	e022                	sd	s0,0(sp)
  put_string("Start time: ");
    800001a6:	00000517          	auipc	a0,0x0
    800001aa:	72250513          	addi	a0,a0,1826 # 800008c8 <.got.plt+0x30>
    800001ae:	ecfff0ef          	jal	ra,8000007c <put_string>
  put_uint64(test.start_time);
    800001b2:	00000417          	auipc	s0,0x0
    800001b6:	6de43403          	ld	s0,1758(s0) # 80000890 <_GLOBAL_OFFSET_TABLE_+0x8>
    800001ba:	6c08                	ld	a0,24(s0)
    800001bc:	ee3ff0ef          	jal	ra,8000009e <put_uint64>
  put_string("\n");
    800001c0:	00000517          	auipc	a0,0x0
    800001c4:	71850513          	addi	a0,a0,1816 # 800008d8 <.got.plt+0x40>
    800001c8:	eb5ff0ef          	jal	ra,8000007c <put_string>

  put_string("End time: ");
    800001cc:	00000517          	auipc	a0,0x0
    800001d0:	71450513          	addi	a0,a0,1812 # 800008e0 <.got.plt+0x48>
    800001d4:	ea9ff0ef          	jal	ra,8000007c <put_string>
  put_uint64(test.end_time);
    800001d8:	7008                	ld	a0,32(s0)
    800001da:	ec5ff0ef          	jal	ra,8000009e <put_uint64>
  put_string("\n");
    800001de:	00000517          	auipc	a0,0x0
    800001e2:	6fa50513          	addi	a0,a0,1786 # 800008d8 <.got.plt+0x40>
    800001e6:	e97ff0ef          	jal	ra,8000007c <put_string>

  put_string("Execution time: ");
    800001ea:	00000517          	auipc	a0,0x0
    800001ee:	70650513          	addi	a0,a0,1798 # 800008f0 <.got.plt+0x58>
    800001f2:	e8bff0ef          	jal	ra,8000007c <put_string>
  put_uint64(test.end_time - test.start_time);
    800001f6:	7008                	ld	a0,32(s0)
    800001f8:	6c1c                	ld	a5,24(s0)
    800001fa:	8d1d                	sub	a0,a0,a5
    800001fc:	ea3ff0ef          	jal	ra,8000009e <put_uint64>
  put_string("\n");
    80000200:	00000517          	auipc	a0,0x0
    80000204:	6d850513          	addi	a0,a0,1752 # 800008d8 <.got.plt+0x40>
    80000208:	e75ff0ef          	jal	ra,8000007c <put_string>

  put_string("Miss count (core 0): ");
    8000020c:	00000517          	auipc	a0,0x0
    80000210:	6fc50513          	addi	a0,a0,1788 # 80000908 <.got.plt+0x70>
    80000214:	e69ff0ef          	jal	ra,8000007c <put_string>
  put_uint64(test.end_miss[0] - test.start_miss[0]);
    80000218:	7c08                	ld	a0,56(s0)
    8000021a:	741c                	ld	a5,40(s0)
    8000021c:	8d1d                	sub	a0,a0,a5
    8000021e:	e81ff0ef          	jal	ra,8000009e <put_uint64>
  put_string("\n");
    80000222:	00000517          	auipc	a0,0x0
    80000226:	6b650513          	addi	a0,a0,1718 # 800008d8 <.got.plt+0x40>
    8000022a:	e53ff0ef          	jal	ra,8000007c <put_string>

  put_string("Miss count (core 1): ");
    8000022e:	00000517          	auipc	a0,0x0
    80000232:	6f250513          	addi	a0,a0,1778 # 80000920 <.got.plt+0x88>
    80000236:	e47ff0ef          	jal	ra,8000007c <put_string>
  put_uint64(test.end_miss[1] - test.start_miss[1]);
    8000023a:	6028                	ld	a0,64(s0)
    8000023c:	781c                	ld	a5,48(s0)
    8000023e:	8d1d                	sub	a0,a0,a5
    80000240:	e5fff0ef          	jal	ra,8000009e <put_uint64>
  put_string("\n");
    80000244:	00000517          	auipc	a0,0x0
    80000248:	69450513          	addi	a0,a0,1684 # 800008d8 <.got.plt+0x40>
    8000024c:	e31ff0ef          	jal	ra,8000007c <put_string>

  put_string("Store count (core 0): ");
    80000250:	00000517          	auipc	a0,0x0
    80000254:	6e850513          	addi	a0,a0,1768 # 80000938 <.got.plt+0xa0>
    80000258:	e25ff0ef          	jal	ra,8000007c <put_string>
  put_uint64(test.end_store[0] - test.start_store[0]);
    8000025c:	7c28                	ld	a0,120(s0)
    8000025e:	743c                	ld	a5,104(s0)
    80000260:	8d1d                	sub	a0,a0,a5
    80000262:	e3dff0ef          	jal	ra,8000009e <put_uint64>
  put_string("\n");
    80000266:	00000517          	auipc	a0,0x0
    8000026a:	67250513          	addi	a0,a0,1650 # 800008d8 <.got.plt+0x40>
    8000026e:	e0fff0ef          	jal	ra,8000007c <put_string>

  put_string("Store count (core 1): ");
    80000272:	00000517          	auipc	a0,0x0
    80000276:	6de50513          	addi	a0,a0,1758 # 80000950 <.got.plt+0xb8>
    8000027a:	e03ff0ef          	jal	ra,8000007c <put_string>
  put_uint64(test.end_store[1] - test.start_store[1]);
    8000027e:	6048                	ld	a0,128(s0)
    80000280:	783c                	ld	a5,112(s0)
    80000282:	8d1d                	sub	a0,a0,a5
    80000284:	e1bff0ef          	jal	ra,8000009e <put_uint64>
  put_string("\n");
    80000288:	00000517          	auipc	a0,0x0
    8000028c:	65050513          	addi	a0,a0,1616 # 800008d8 <.got.plt+0x40>
    80000290:	dedff0ef          	jal	ra,8000007c <put_string>

  put_string("Load count (core 0): ");
    80000294:	00000517          	auipc	a0,0x0
    80000298:	6d450513          	addi	a0,a0,1748 # 80000968 <.got.plt+0xd0>
    8000029c:	de1ff0ef          	jal	ra,8000007c <put_string>
  put_uint64(test.end_load[0] - test.start_load[0]);
    800002a0:	6c28                	ld	a0,88(s0)
    800002a2:	643c                	ld	a5,72(s0)
    800002a4:	8d1d                	sub	a0,a0,a5
    800002a6:	df9ff0ef          	jal	ra,8000009e <put_uint64>
  put_string("\n");
    800002aa:	00000517          	auipc	a0,0x0
    800002ae:	62e50513          	addi	a0,a0,1582 # 800008d8 <.got.plt+0x40>
    800002b2:	dcbff0ef          	jal	ra,8000007c <put_string>

  put_string("Load count (core 1): ");
    800002b6:	00000517          	auipc	a0,0x0
    800002ba:	6ca50513          	addi	a0,a0,1738 # 80000980 <.got.plt+0xe8>
    800002be:	dbfff0ef          	jal	ra,8000007c <put_string>
  put_uint64(test.end_load[1] - test.start_load[1]);
    800002c2:	7028                	ld	a0,96(s0)
    800002c4:	683c                	ld	a5,80(s0)
    800002c6:	8d1d                	sub	a0,a0,a5
    800002c8:	dd7ff0ef          	jal	ra,8000009e <put_uint64>
  put_string("\n");
    800002cc:	00000517          	auipc	a0,0x0
    800002d0:	60c50513          	addi	a0,a0,1548 # 800008d8 <.got.plt+0x40>
    800002d4:	da9ff0ef          	jal	ra,8000007c <put_string>

  put_string("WB count (core 0): ");
    800002d8:	00000517          	auipc	a0,0x0
    800002dc:	6c050513          	addi	a0,a0,1728 # 80000998 <.got.plt+0x100>
    800002e0:	d9dff0ef          	jal	ra,8000007c <put_string>
  put_uint64(test.end_cacheline_in[0] - test.start_cacheline_in[0]);
    800002e4:	6c48                	ld	a0,152(s0)
    800002e6:	645c                	ld	a5,136(s0)
    800002e8:	8d1d                	sub	a0,a0,a5
    800002ea:	db5ff0ef          	jal	ra,8000009e <put_uint64>
  put_string("\n");
    800002ee:	00000517          	auipc	a0,0x0
    800002f2:	5ea50513          	addi	a0,a0,1514 # 800008d8 <.got.plt+0x40>
    800002f6:	d87ff0ef          	jal	ra,8000007c <put_string>

  put_string("WB count (core 1): ");
    800002fa:	00000517          	auipc	a0,0x0
    800002fe:	6b650513          	addi	a0,a0,1718 # 800009b0 <.got.plt+0x118>
    80000302:	d7bff0ef          	jal	ra,8000007c <put_string>
  put_uint64(test.end_cacheline_in[1] - test.start_cacheline_in[1]);
    80000306:	7048                	ld	a0,160(s0)
    80000308:	685c                	ld	a5,144(s0)
    8000030a:	8d1d                	sub	a0,a0,a5
    8000030c:	d93ff0ef          	jal	ra,8000009e <put_uint64>
  put_string("\n");
    80000310:	00000517          	auipc	a0,0x0
    80000314:	5c850513          	addi	a0,a0,1480 # 800008d8 <.got.plt+0x40>
    80000318:	d65ff0ef          	jal	ra,8000007c <put_string>

  put_string("Cacheline loaded (core 0): ");
    8000031c:	00000517          	auipc	a0,0x0
    80000320:	6ac50513          	addi	a0,a0,1708 # 800009c8 <.got.plt+0x130>
    80000324:	d59ff0ef          	jal	ra,8000007c <put_string>
  put_uint64(test.end_cacheline_out[0] - test.start_cacheline_out[0]);
    80000328:	7c48                	ld	a0,184(s0)
    8000032a:	745c                	ld	a5,168(s0)
    8000032c:	8d1d                	sub	a0,a0,a5
    8000032e:	d71ff0ef          	jal	ra,8000009e <put_uint64>
  put_string("\n");
    80000332:	00000517          	auipc	a0,0x0
    80000336:	5a650513          	addi	a0,a0,1446 # 800008d8 <.got.plt+0x40>
    8000033a:	d43ff0ef          	jal	ra,8000007c <put_string>

  put_string("Cacheline loaded (core 1): ");
    8000033e:	00000517          	auipc	a0,0x0
    80000342:	6aa50513          	addi	a0,a0,1706 # 800009e8 <.got.plt+0x150>
    80000346:	d37ff0ef          	jal	ra,8000007c <put_string>
  put_uint64(test.end_cacheline_out[1] - test.start_cacheline_out[1]);
    8000034a:	6068                	ld	a0,192(s0)
    8000034c:	785c                	ld	a5,176(s0)
    8000034e:	8d1d                	sub	a0,a0,a5
    80000350:	d4fff0ef          	jal	ra,8000009e <put_uint64>
  put_string("\n");
    80000354:	00000517          	auipc	a0,0x0
    80000358:	58450513          	addi	a0,a0,1412 # 800008d8 <.got.plt+0x40>
    8000035c:	d21ff0ef          	jal	ra,8000007c <put_string>

}
    80000360:	60a2                	ld	ra,8(sp)
    80000362:	6402                	ld	s0,0(sp)
    80000364:	0141                	addi	sp,sp,16
    80000366:	8082                	ret

0000000080000368 <log_display>:
void log_display()
{
    80000368:	1141                	addi	sp,sp,-16
    8000036a:	e406                	sd	ra,8(sp)
  put_string("log_display started\r\n");
    8000036c:	00000517          	auipc	a0,0x0
    80000370:	69c50513          	addi	a0,a0,1692 # 80000a08 <.got.plt+0x170>
    80000374:	d09ff0ef          	jal	ra,8000007c <put_string>
  /*if(log_check_coherence() == -1){
    put_string("ERROR: coherence not ensured\r\n");
  }
  else{*/
    log_print_performance();
    80000378:	e29ff0ef          	jal	ra,800001a0 <log_print_performance>
  //}
}
    8000037c:	60a2                	ld	ra,8(sp)
    8000037e:	0141                	addi	sp,sp,16
    80000380:	8082                	ret

0000000080000382 <rand_bit>:

static const uint32_t a = 69069;
static const uint32_t c = 25173;

inline static uint32_t unlocked_rand(uint32_t *st)  {
  uint32_t r = a * *st + c ;
    80000382:	411c                	lw	a5,0(a0)
    80000384:	6745                	lui	a4,0x11
    80000386:	dcd7071b          	addiw	a4,a4,-563 # 10dcd <HARTID+0xfeb9>
    8000038a:	02e787bb          	mulw	a5,a5,a4
    8000038e:	6719                	lui	a4,0x6
    80000390:	2557071b          	addiw	a4,a4,597 # 6255 <HARTID+0x5341>
    80000394:	9fb9                	addw	a5,a5,a4
  *st = r ;
    80000396:	c11c                	sw	a5,0(a0)
  /* Swap high & low bits */
  uint32_t low = r & 0xffff ;
  uint32_t high = r >> 16 ;
  r = high | (low << 16) ;
    80000398:	0107d51b          	srliw	a0,a5,0x10

int rand_bit(uint32_t *st)  {
  uint32_t r = unlocked_rand(st) ;
  r &= 1 ;
  return r ; 
}
    8000039c:	8905                	andi	a0,a0,1
    8000039e:	8082                	ret

00000000800003a0 <rand_k>:

uint32_t rand_k(uint32_t *st, uint32_t k) {
    800003a0:	832a                	mv	t1,a0
    800003a2:	4118                	lw	a4,0(a0)
  uint32_t r = a * *st + c ;
    800003a4:	68c5                	lui	a7,0x11
    800003a6:	dcd8889b          	addiw	a7,a7,-563 # 10dcd <HARTID+0xfeb9>
    800003aa:	6819                	lui	a6,0x6
    800003ac:	2558081b          	addiw	a6,a6,597 # 6255 <HARTID+0x5341>
  uint32_t r, v ;
  do {
    r = unlocked_rand(st) ;
    v = r % k ;
  } while (r-v > 0xffffffff-k+1) ;
    800003b0:	40b0063b          	negw	a2,a1
    800003b4:	2601                	sext.w	a2,a2
  uint32_t r = a * *st + c ;
    800003b6:	0317073b          	mulw	a4,a4,a7
    800003ba:	0107073b          	addw	a4,a4,a6
  r = high | (low << 16) ;
    800003be:	0107179b          	slliw	a5,a4,0x10
    800003c2:	0107569b          	srliw	a3,a4,0x10
    800003c6:	8fd5                	or	a5,a5,a3
    800003c8:	2781                	sext.w	a5,a5
    v = r % k ;
    800003ca:	02b7f6bb          	remuw	a3,a5,a1
    800003ce:	0006851b          	sext.w	a0,a3
  *st = r ;
    800003d2:	2701                	sext.w	a4,a4
  } while (r-v > 0xffffffff-k+1) ;
    800003d4:	9f95                	subw	a5,a5,a3
    800003d6:	fef660e3          	bltu	a2,a5,800003b6 <rand_k+0x16>
    800003da:	00e32023          	sw	a4,0(t1)
  return v ;
}
    800003de:	8082                	ret

00000000800003e0 <arch_get_process_id>:
// Hardware thread id =========================================================

uint64_t arch_get_process_id()
{
  uint64_t x;
  asm volatile("csrr %0, 0xf14" : "=r" (x));  //CSRRS rd, csr, x0
    800003e0:	f1402573          	csrr	a0,mhartid
  return  x;
}
    800003e4:	8082                	ret

00000000800003e6 <arch_get_counter>:
// Hardware counter ===========================================================

uint64_t arch_get_counter()
{
  uint64_t x;
  asm volatile("csrr %0, mcycle" : "=r" (x));
    800003e6:	b0002573          	csrr	a0,mcycle
  return  x;
}
    800003ea:	8082                	ret

00000000800003ec <arch_get_miss>:

uint64_t arch_get_miss()
{
  uint64_t x;
  asm volatile("csrr %0, 0xB04" : "=r" (x));
    800003ec:	b0402573          	csrr	a0,mhpmcounter4
  return  x;
}
    800003f0:	8082                	ret

00000000800003f2 <arch_get_load>:

uint64_t arch_get_load()
{
  uint64_t x;
  asm volatile("csrr %0, 0xB07" : "=r" (x));
    800003f2:	b0702573          	csrr	a0,mhpmcounter7
  return  x;
}
    800003f6:	8082                	ret

00000000800003f8 <arch_get_store>:

uint64_t arch_get_store()
{
  uint64_t x;
  asm volatile("csrr %0, 0xB08" : "=r" (x));
    800003f8:	b0802573          	csrr	a0,mhpmcounter8
  return  x;
}
    800003fc:	8082                	ret

00000000800003fe <arch_get_cacheline_in>:

uint64_t arch_get_cacheline_in()
{
  uint64_t x;
  asm volatile("csrr %0, 0xB11" : "=r" (x));
    800003fe:	b1102573          	csrr	a0,mhpmcounter17
  return  x;
}
    80000402:	8082                	ret

0000000080000404 <arch_get_cacheline_out>:

uint64_t arch_get_cacheline_out()
{
  uint64_t x;
  asm volatile("csrr %0, 0xB12" : "=r" (x));
    80000404:	b1202573          	csrr	a0,mhpmcounter18
  return  x;
}
    80000408:	8082                	ret

000000008000040a <barrier_wait>:
    volatile uint64_t* barrier
  , uint64_t incr_amount
  , uint64_t reach
  )
{
  asm volatile (
    8000040a:	00b5332f          	amoadd.d	t1,a1,(a0)
    8000040e:	0ff0000f          	fence
    80000412:	00053303          	ld	t1,0(a0)
    80000416:	fec31ce3          	bne	t1,a2,8000040e <barrier_wait+0x4>
    "r"(incr_amount),
    "r"(reach)
  : /* clobbered registers */
    "x6"
  );
}
    8000041a:	8082                	ret

000000008000041c <arch_barrier_up>:

void arch_barrier_up()
{
    8000041c:	1141                	addi	sp,sp,-16
    8000041e:	e406                	sd	ra,8(sp)
  barrier_wait(&barrier1, 1, NUM_PROCESSES);
    80000420:	4609                	li	a2,2
    80000422:	4585                	li	a1,1
    80000424:	00000517          	auipc	a0,0x0
    80000428:	37c50513          	addi	a0,a0,892 # 800007a0 <barrier1>
    8000042c:	fdfff0ef          	jal	ra,8000040a <barrier_wait>
  barrier_wait(&barrier2, 1, NUM_PROCESSES);
    80000430:	4609                	li	a2,2
    80000432:	4585                	li	a1,1
    80000434:	00000517          	auipc	a0,0x0
    80000438:	37450513          	addi	a0,a0,884 # 800007a8 <barrier2>
    8000043c:	fcfff0ef          	jal	ra,8000040a <barrier_wait>
}
    80000440:	60a2                	ld	ra,8(sp)
    80000442:	0141                	addi	sp,sp,16
    80000444:	8082                	ret

0000000080000446 <arch_barrier_down>:

void arch_barrier_down()
{
    80000446:	1141                	addi	sp,sp,-16
    80000448:	e406                	sd	ra,8(sp)
  barrier_wait(&barrier1, -1, 0);
    8000044a:	4601                	li	a2,0
    8000044c:	55fd                	li	a1,-1
    8000044e:	00000517          	auipc	a0,0x0
    80000452:	35250513          	addi	a0,a0,850 # 800007a0 <barrier1>
    80000456:	fb5ff0ef          	jal	ra,8000040a <barrier_wait>
  barrier_wait(&barrier2, -1, 0);
    8000045a:	4601                	li	a2,0
    8000045c:	55fd                	li	a1,-1
    8000045e:	00000517          	auipc	a0,0x0
    80000462:	34a50513          	addi	a0,a0,842 # 800007a8 <barrier2>
    80000466:	fa5ff0ef          	jal	ra,8000040a <barrier_wait>
}
    8000046a:	60a2                	ld	ra,8(sp)
    8000046c:	0141                	addi	sp,sp,16
    8000046e:	8082                	ret

0000000080000470 <acquire>:


void acquire(volatile uint32_t * lock)
{
  asm volatile (
    80000470:	4285                	li	t0,1

0000000080000472 <again>:
    80000472:	0c5522af          	amoswap.w.aq	t0,t0,(a0)
    80000476:	fe029ee3          	bnez	t0,80000472 <again>
      "bnez t0, again             \n"
      
  : /* output operands */
  : /* input operands */
    "r"(lock));
}
    8000047a:	8082                	ret

000000008000047c <release>:

void release(volatile uint32_t * lock)
{
  asm volatile (
    8000047c:	0a05202f          	amoswap.w.rl	zero,zero,(a0)
      "amoswap.w.rl x0, x0, (%0)"
      
  : /* output operands */
  : /* input operands */
    "r"(lock));
    80000480:	8082                	ret

0000000080000482 <put_char>:
  print_uart(consoleBuffer,consoleBufferLen);
  consoleBufferLen = 0;

}*/
void put_char(char c)
{
    80000482:	1141                	addi	sp,sp,-16
    80000484:	e406                	sd	ra,8(sp)

  write_serial(c);
    80000486:	02c000ef          	jal	ra,800004b2 <write_serial>
}
    8000048a:	60a2                	ld	ra,8(sp)
    8000048c:	0141                	addi	sp,sp,16
    8000048e:	8082                	ret

0000000080000490 <write_reg_u8>:
#include "uart.h"

void write_reg_u8(uintptr_t addr, uint8_t value)
{
    volatile uint8_t *loc_addr = (volatile uint8_t *)addr;
    *loc_addr = value;
    80000490:	00b50023          	sb	a1,0(a0)
}
    80000494:	8082                	ret

0000000080000496 <read_reg_u8>:

uint8_t read_reg_u8(uintptr_t addr)
{
    return *(volatile uint8_t *)addr;
    80000496:	00054503          	lbu	a0,0(a0)
}
    8000049a:	0ff57513          	zext.b	a0,a0
    8000049e:	8082                	ret

00000000800004a0 <is_transmit_empty>:
    return *(volatile uint8_t *)addr;
    800004a0:	100007b7          	lui	a5,0x10000
    800004a4:	0147c503          	lbu	a0,20(a5) # 10000014 <HARTID+0xffff100>
    800004a8:	0ff57513          	zext.b	a0,a0

int is_transmit_empty()
{
    return read_reg_u8(UART_LINE_STATUS) & 0x20;
}
    800004ac:	02057513          	andi	a0,a0,32
    800004b0:	8082                	ret

00000000800004b2 <write_serial>:
    return *(volatile uint8_t *)addr;
    800004b2:	10000737          	lui	a4,0x10000
    800004b6:	01474783          	lbu	a5,20(a4) # 10000014 <HARTID+0xffff100>
    800004ba:	0ff7f793          	zext.b	a5,a5

void write_serial(char a)
{
    while (is_transmit_empty() == 0) {};
    800004be:	0207f793          	andi	a5,a5,32
    800004c2:	dbf5                	beqz	a5,800004b6 <write_serial+0x4>
    *loc_addr = value;
    800004c4:	100007b7          	lui	a5,0x10000
    800004c8:	00a78023          	sb	a0,0(a5) # 10000000 <HARTID+0xffff0ec>
    //for (int i = 0; i < 100; i++){i++;}

    write_reg_u8(UART_THR, a);
}
    800004cc:	8082                	ret

00000000800004ce <init_uart>:

void init_uart(uint32_t freq, uint32_t baud)
{
    uint32_t divisor = freq / (baud << 4);
    800004ce:	0045959b          	slliw	a1,a1,0x4
    800004d2:	02b5553b          	divuw	a0,a0,a1
    *loc_addr = value;
    800004d6:	100007b7          	lui	a5,0x10000
    800004da:	00078223          	sb	zero,4(a5) # 10000004 <HARTID+0xffff0f0>
    800004de:	f8000713          	li	a4,-128
    800004e2:	00e78623          	sb	a4,12(a5)

    write_reg_u8(UART_INTERRUPT_ENABLE, 0x00); // Disable all interrupts
    write_reg_u8(UART_LINE_CONTROL, 0x80);     // Enable DLAB (set baud rate divisor)
    write_reg_u8(UART_DLAB_LSB, divisor);         // divisor (lo byte)
    800004e6:	0ff57713          	zext.b	a4,a0
    *loc_addr = value;
    800004ea:	00e78023          	sb	a4,0(a5)
    write_reg_u8(UART_DLAB_MSB, (divisor >> 8) & 0xFF);  // divisor (hi byte)
    800004ee:	0085551b          	srliw	a0,a0,0x8
    800004f2:	0ff57513          	zext.b	a0,a0
    *loc_addr = value;
    800004f6:	00a78223          	sb	a0,4(a5)
    800004fa:	470d                	li	a4,3
    800004fc:	00e78623          	sb	a4,12(a5)
    80000500:	fc700713          	li	a4,-57
    80000504:	00e78423          	sb	a4,8(a5)
    80000508:	02000713          	li	a4,32
    8000050c:	00e78823          	sb	a4,16(a5)
    write_reg_u8(UART_LINE_CONTROL, 0x03);     // 8 bits, no parity, one stop bit
    write_reg_u8(UART_FIFO_CONTROL, 0xC7);     // Enable FIFO, clear them, with 14-byte threshold
    write_reg_u8(UART_MODEM_CONTROL, 0x20);    // Autoflow mode
}
    80000510:	8082                	ret

0000000080000512 <print_uart>:

void print_uart(char *str,int length)
{
    char *cur = &str[0];
    for (int i = 0; i < length; i++)
    80000512:	02b05963          	blez	a1,80000544 <print_uart+0x32>
{
    80000516:	1101                	addi	sp,sp,-32
    80000518:	ec06                	sd	ra,24(sp)
    8000051a:	e822                	sd	s0,16(sp)
    8000051c:	e426                	sd	s1,8(sp)
    8000051e:	842a                	mv	s0,a0
    80000520:	fff5849b          	addiw	s1,a1,-1
    80000524:	1482                	slli	s1,s1,0x20
    80000526:	9081                	srli	s1,s1,0x20
    80000528:	0485                	addi	s1,s1,1
    8000052a:	94aa                	add	s1,s1,a0
    {
        write_serial((uint8_t)*cur);
    8000052c:	00044503          	lbu	a0,0(s0)
    80000530:	f83ff0ef          	jal	ra,800004b2 <write_serial>
        ++cur;
    80000534:	0405                	addi	s0,s0,1
    for (int i = 0; i < length; i++)
    80000536:	fe941be3          	bne	s0,s1,8000052c <print_uart+0x1a>
    /*while (*cur != '\0')
    {
        write_serial((uint8_t)*cur);
        ++cur;
    }*/
}
    8000053a:	60e2                	ld	ra,24(sp)
    8000053c:	6442                	ld	s0,16(sp)
    8000053e:	64a2                	ld	s1,8(sp)
    80000540:	6105                	addi	sp,sp,32
    80000542:	8082                	ret
    80000544:	8082                	ret

0000000080000546 <bin_to_hex>:
uint8_t bin_to_hex_table[16] = {
    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};

void bin_to_hex(uint8_t inp, uint8_t res[2])
{
    res[1] = bin_to_hex_table[inp & 0xf];
    80000546:	00000797          	auipc	a5,0x0
    8000054a:	33278793          	addi	a5,a5,818 # 80000878 <bin_to_hex_table>
    8000054e:	00f57713          	andi	a4,a0,15
    80000552:	973e                	add	a4,a4,a5
    80000554:	00074703          	lbu	a4,0(a4)
    80000558:	00e580a3          	sb	a4,1(a1)
    res[0] = bin_to_hex_table[(inp >> 4) & 0xf];
    8000055c:	8111                	srli	a0,a0,0x4
    8000055e:	97aa                	add	a5,a5,a0
    80000560:	0007c783          	lbu	a5,0(a5)
    80000564:	00f58023          	sb	a5,0(a1)
    return;
}
    80000568:	8082                	ret

000000008000056a <print_uart_int>:

void print_uart_int(uint32_t addr)
{
    8000056a:	7139                	addi	sp,sp,-64
    8000056c:	fc06                	sd	ra,56(sp)
    8000056e:	f822                	sd	s0,48(sp)
    80000570:	f426                	sd	s1,40(sp)
    80000572:	f04a                	sd	s2,32(sp)
    80000574:	ec4e                	sd	s3,24(sp)
    80000576:	89aa                	mv	s3,a0
    80000578:	4461                	li	s0,24
    int i;
    for (i = 3; i > -1; i--)
    {
        uint8_t cur = (addr >> (i * 8)) & 0xff;
        uint8_t hex[2];
        bin_to_hex(cur, hex);
    8000057a:	00810913          	addi	s2,sp,8
    for (i = 3; i > -1; i--)
    8000057e:	54e1                	li	s1,-8
        uint8_t cur = (addr >> (i * 8)) & 0xff;
    80000580:	0089d53b          	srlw	a0,s3,s0
        bin_to_hex(cur, hex);
    80000584:	85ca                	mv	a1,s2
    80000586:	0ff57513          	zext.b	a0,a0
    8000058a:	fbdff0ef          	jal	ra,80000546 <bin_to_hex>
        write_serial(hex[0]);
    8000058e:	00814503          	lbu	a0,8(sp)
    80000592:	f21ff0ef          	jal	ra,800004b2 <write_serial>
        write_serial(hex[1]);
    80000596:	00914503          	lbu	a0,9(sp)
    8000059a:	f19ff0ef          	jal	ra,800004b2 <write_serial>
    for (i = 3; i > -1; i--)
    8000059e:	3461                	addiw	s0,s0,-8
    800005a0:	fe9410e3          	bne	s0,s1,80000580 <print_uart_int+0x16>
    }
}
    800005a4:	70e2                	ld	ra,56(sp)
    800005a6:	7442                	ld	s0,48(sp)
    800005a8:	74a2                	ld	s1,40(sp)
    800005aa:	7902                	ld	s2,32(sp)
    800005ac:	69e2                	ld	s3,24(sp)
    800005ae:	6121                	addi	sp,sp,64
    800005b0:	8082                	ret

00000000800005b2 <print_uart_addr>:

void print_uart_addr(uint64_t addr)
{
    800005b2:	7139                	addi	sp,sp,-64
    800005b4:	fc06                	sd	ra,56(sp)
    800005b6:	f822                	sd	s0,48(sp)
    800005b8:	f426                	sd	s1,40(sp)
    800005ba:	f04a                	sd	s2,32(sp)
    800005bc:	ec4e                	sd	s3,24(sp)
    800005be:	89aa                	mv	s3,a0
    800005c0:	03800413          	li	s0,56
    int i;
    for (i = 7; i > -1; i--)
    {
        uint8_t cur = (addr >> (i * 8)) & 0xff;
        uint8_t hex[2];
        bin_to_hex(cur, hex);
    800005c4:	00810913          	addi	s2,sp,8
    for (i = 7; i > -1; i--)
    800005c8:	54e1                	li	s1,-8
        uint8_t cur = (addr >> (i * 8)) & 0xff;
    800005ca:	0089d533          	srl	a0,s3,s0
        bin_to_hex(cur, hex);
    800005ce:	85ca                	mv	a1,s2
    800005d0:	0ff57513          	zext.b	a0,a0
    800005d4:	f73ff0ef          	jal	ra,80000546 <bin_to_hex>
        write_serial(hex[0]);
    800005d8:	00814503          	lbu	a0,8(sp)
    800005dc:	ed7ff0ef          	jal	ra,800004b2 <write_serial>
        write_serial(hex[1]);
    800005e0:	00914503          	lbu	a0,9(sp)
    800005e4:	ecfff0ef          	jal	ra,800004b2 <write_serial>
    for (i = 7; i > -1; i--)
    800005e8:	3461                	addiw	s0,s0,-8
    800005ea:	fe9410e3          	bne	s0,s1,800005ca <print_uart_addr+0x18>
    }
}
    800005ee:	70e2                	ld	ra,56(sp)
    800005f0:	7442                	ld	s0,48(sp)
    800005f2:	74a2                	ld	s1,40(sp)
    800005f4:	7902                	ld	s2,32(sp)
    800005f6:	69e2                	ld	s3,24(sp)
    800005f8:	6121                	addi	sp,sp,64
    800005fa:	8082                	ret

00000000800005fc <print_uart_byte>:

void print_uart_byte(uint8_t byte)
{
    800005fc:	1101                	addi	sp,sp,-32
    800005fe:	ec06                	sd	ra,24(sp)
    uint8_t hex[2];
    bin_to_hex(byte, hex);
    80000600:	002c                	addi	a1,sp,8
    80000602:	f45ff0ef          	jal	ra,80000546 <bin_to_hex>
    write_serial(hex[0]);
    80000606:	00814503          	lbu	a0,8(sp)
    8000060a:	ea9ff0ef          	jal	ra,800004b2 <write_serial>
    write_serial(hex[1]);
    8000060e:	00914503          	lbu	a0,9(sp)
    80000612:	ea1ff0ef          	jal	ra,800004b2 <write_serial>
    80000616:	60e2                	ld	ra,24(sp)
    80000618:	6105                	addi	sp,sp,32
    8000061a:	8082                	ret

000000008000061c <test_init>:
// =========
// Functions
// =========

void test_init()
{
    8000061c:	1141                	addi	sp,sp,-16
    8000061e:	e406                	sd	ra,8(sp)
  put_string("test_init started\r\n");
    80000620:	00000517          	auipc	a0,0x0
    80000624:	40050513          	addi	a0,a0,1024 # 80000a20 <.got.plt+0x188>
    80000628:	a55ff0ef          	jal	ra,8000007c <put_string>
  // Randomize variable locations
  test.lock = 0;
    8000062c:	00000797          	auipc	a5,0x0
    80000630:	2647b783          	ld	a5,612(a5) # 80000890 <_GLOBAL_OFFSET_TABLE_+0x8>
    80000634:	0007aa23          	sw	zero,20(a5)
  for (int i = 0; i < VECTOR_SIZE; i++)
  {
    test.outcome[i] = 0;
    80000638:	0007a023          	sw	zero,0(a5)
    8000063c:	0007a223          	sw	zero,4(a5)
    80000640:	0007a423          	sw	zero,8(a5)
    80000644:	0007a623          	sw	zero,12(a5)
    80000648:	0007a823          	sw	zero,16(a5)
  }

}
    8000064c:	60a2                	ld	ra,8(sp)
    8000064e:	0141                	addi	sp,sp,16
    80000650:	8082                	ret

0000000080000652 <test_op>:
    asm volatile ("nop\n");
}


void test_op()
{
    80000652:	1141                	addi	sp,sp,-16
    80000654:	e406                	sd	ra,8(sp)
    80000656:	e022                	sd	s0,0(sp)
  for (int i = 0; i < NUM_ITERATIONS; i++)
      {
        acquire(&test.lock);
    80000658:	00000517          	auipc	a0,0x0
    8000065c:	23853503          	ld	a0,568(a0) # 80000890 <_GLOBAL_OFFSET_TABLE_+0x8>
    80000660:	0551                	addi	a0,a0,20
    80000662:	e0fff0ef          	jal	ra,80000470 <acquire>
    80000666:	4695                	li	a3,5
        //Critical section
        for (int i = 0; i < VECTOR_SIZE; i++)
        {
          for (int i = 0; i < NUM_SHARED_ACCESSES; i++)
          {
            test.outcome[i]++;
    80000668:	00000797          	auipc	a5,0x0
    8000066c:	2287b783          	ld	a5,552(a5) # 80000890 <_GLOBAL_OFFSET_TABLE_+0x8>
    80000670:	4398                	lw	a4,0(a5)
    80000672:	2705                	addiw	a4,a4,1
    80000674:	c398                	sw	a4,0(a5)
    80000676:	43d8                	lw	a4,4(a5)
    80000678:	2705                	addiw	a4,a4,1
    8000067a:	c3d8                	sw	a4,4(a5)
        for (int i = 0; i < VECTOR_SIZE; i++)
    8000067c:	36fd                	addiw	a3,a3,-1
    8000067e:	faed                	bnez	a3,80000670 <test_op+0x1e>
          }
        }
        release(&test.lock);
    80000680:	00000417          	auipc	s0,0x0
    80000684:	21043403          	ld	s0,528(s0) # 80000890 <_GLOBAL_OFFSET_TABLE_+0x8>
    80000688:	01440513          	addi	a0,s0,20
    8000068c:	df1ff0ef          	jal	ra,8000047c <release>
        acquire(&test.lock);
    80000690:	01440513          	addi	a0,s0,20
    80000694:	dddff0ef          	jal	ra,80000470 <acquire>
    80000698:	4695                	li	a3,5
            test.outcome[i]++;
    8000069a:	87a2                	mv	a5,s0
    8000069c:	4398                	lw	a4,0(a5)
    8000069e:	2705                	addiw	a4,a4,1
    800006a0:	c398                	sw	a4,0(a5)
    800006a2:	43d8                	lw	a4,4(a5)
    800006a4:	2705                	addiw	a4,a4,1
    800006a6:	c3d8                	sw	a4,4(a5)
        for (int i = 0; i < VECTOR_SIZE; i++)
    800006a8:	36fd                	addiw	a3,a3,-1
    800006aa:	faed                	bnez	a3,8000069c <test_op+0x4a>
        release(&test.lock);
    800006ac:	00000517          	auipc	a0,0x0
    800006b0:	1e453503          	ld	a0,484(a0) # 80000890 <_GLOBAL_OFFSET_TABLE_+0x8>
    800006b4:	0551                	addi	a0,a0,20
    800006b6:	dc7ff0ef          	jal	ra,8000047c <release>
      }
}
    800006ba:	60a2                	ld	ra,8(sp)
    800006bc:	6402                	ld	s0,0(sp)
    800006be:	0141                	addi	sp,sp,16
    800006c0:	8082                	ret

00000000800006c2 <test_body>:

void test_body(int pid) {
    800006c2:	1101                	addi	sp,sp,-32
    800006c4:	ec06                	sd	ra,24(sp)
    800006c6:	e822                	sd	s0,16(sp)
    800006c8:	e426                	sd	s1,8(sp)
    800006ca:	842a                	mv	s0,a0

  //sync start of test
  arch_barrier_up();
    800006cc:	d51ff0ef          	jal	ra,8000041c <arch_barrier_up>
  //save stat
  test.start_miss[pid] = arch_get_miss();
    800006d0:	d1dff0ef          	jal	ra,800003ec <arch_get_miss>
    800006d4:	00000497          	auipc	s1,0x0
    800006d8:	1bc4b483          	ld	s1,444(s1) # 80000890 <_GLOBAL_OFFSET_TABLE_+0x8>
    800006dc:	00440793          	addi	a5,s0,4
    800006e0:	078e                	slli	a5,a5,0x3
    800006e2:	97a6                	add	a5,a5,s1
    800006e4:	e788                	sd	a0,8(a5)
  test.start_load[pid] = arch_get_load();
    800006e6:	d0dff0ef          	jal	ra,800003f2 <arch_get_load>
    800006ea:	00840793          	addi	a5,s0,8
    800006ee:	078e                	slli	a5,a5,0x3
    800006f0:	97a6                	add	a5,a5,s1
    800006f2:	e788                	sd	a0,8(a5)
  test.start_store[pid] = arch_get_store();
    800006f4:	d05ff0ef          	jal	ra,800003f8 <arch_get_store>
    800006f8:	00c40793          	addi	a5,s0,12
    800006fc:	078e                	slli	a5,a5,0x3
    800006fe:	97a6                	add	a5,a5,s1
    80000700:	e788                	sd	a0,8(a5)
  test.start_cacheline_in[pid]  = arch_get_cacheline_in();
    80000702:	cfdff0ef          	jal	ra,800003fe <arch_get_cacheline_in>
    80000706:	01040793          	addi	a5,s0,16
    8000070a:	078e                	slli	a5,a5,0x3
    8000070c:	97a6                	add	a5,a5,s1
    8000070e:	e788                	sd	a0,8(a5)
  test.start_cacheline_out[pid] = arch_get_cacheline_out();
    80000710:	cf5ff0ef          	jal	ra,80000404 <arch_get_cacheline_out>
    80000714:	01440793          	addi	a5,s0,20
    80000718:	078e                	slli	a5,a5,0x3
    8000071a:	94be                	add	s1,s1,a5
    8000071c:	e488                	sd	a0,8(s1)

  switch(pid) {
    8000071e:	c809                	beqz	s0,80000730 <test_body+0x6e>
    80000720:	4785                	li	a5,1
    80000722:	04f40563          	beq	s0,a5,8000076c <test_body+0xaa>
      break;
    }
  }

  
}
    80000726:	60e2                	ld	ra,24(sp)
    80000728:	6442                	ld	s0,16(sp)
    8000072a:	64a2                	ld	s1,8(sp)
    8000072c:	6105                	addi	sp,sp,32
    8000072e:	8082                	ret
      test.start_time = arch_get_counter();
    80000730:	cb7ff0ef          	jal	ra,800003e6 <arch_get_counter>
    80000734:	00000417          	auipc	s0,0x0
    80000738:	15c43403          	ld	s0,348(s0) # 80000890 <_GLOBAL_OFFSET_TABLE_+0x8>
    8000073c:	ec08                	sd	a0,24(s0)
      test_op();
    8000073e:	f15ff0ef          	jal	ra,80000652 <test_op>
      test.end_miss[pid] = arch_get_miss();
    80000742:	cabff0ef          	jal	ra,800003ec <arch_get_miss>
    80000746:	fc08                	sd	a0,56(s0)
      test.end_load[pid] = arch_get_load();
    80000748:	cabff0ef          	jal	ra,800003f2 <arch_get_load>
    8000074c:	ec28                	sd	a0,88(s0)
      test.end_store[pid] = arch_get_store();
    8000074e:	cabff0ef          	jal	ra,800003f8 <arch_get_store>
    80000752:	fc28                	sd	a0,120(s0)
      test.end_cacheline_in[pid]  = arch_get_cacheline_in();
    80000754:	cabff0ef          	jal	ra,800003fe <arch_get_cacheline_in>
    80000758:	ec48                	sd	a0,152(s0)
      test.end_cacheline_out[pid] = arch_get_cacheline_out();
    8000075a:	cabff0ef          	jal	ra,80000404 <arch_get_cacheline_out>
    8000075e:	fc48                	sd	a0,184(s0)
      arch_barrier_down();
    80000760:	ce7ff0ef          	jal	ra,80000446 <arch_barrier_down>
      test.end_time = arch_get_counter();
    80000764:	c83ff0ef          	jal	ra,800003e6 <arch_get_counter>
    80000768:	f008                	sd	a0,32(s0)
      break;
    8000076a:	bf75                	j	80000726 <test_body+0x64>
      test_op();
    8000076c:	ee7ff0ef          	jal	ra,80000652 <test_op>
      test.end_miss[pid] = arch_get_miss();
    80000770:	c7dff0ef          	jal	ra,800003ec <arch_get_miss>
    80000774:	00000417          	auipc	s0,0x0
    80000778:	11c43403          	ld	s0,284(s0) # 80000890 <_GLOBAL_OFFSET_TABLE_+0x8>
    8000077c:	e028                	sd	a0,64(s0)
      test.end_load[pid] = arch_get_load();
    8000077e:	c75ff0ef          	jal	ra,800003f2 <arch_get_load>
    80000782:	f028                	sd	a0,96(s0)
      test.end_store[pid] = arch_get_store();
    80000784:	c75ff0ef          	jal	ra,800003f8 <arch_get_store>
    80000788:	e048                	sd	a0,128(s0)
      test.end_cacheline_in[pid]  = arch_get_cacheline_in();
    8000078a:	c75ff0ef          	jal	ra,800003fe <arch_get_cacheline_in>
    8000078e:	f048                	sd	a0,160(s0)
      test.end_cacheline_out[pid] = arch_get_cacheline_out();
    80000790:	c75ff0ef          	jal	ra,80000404 <arch_get_cacheline_out>
    80000794:	e068                	sd	a0,192(s0)
      arch_barrier_down();
    80000796:	cb1ff0ef          	jal	ra,80000446 <arch_barrier_down>
}
    8000079a:	b771                	j	80000726 <test_body+0x64>
